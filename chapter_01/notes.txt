Binary search:
Binary search is an algorithm; its input is a sorted list of elements. If an element you’re looking 
for is in that list, binary search returns the position where it’s located. Otherwise, binary search 
returns null.
_____________________________________________________________________________________________________
Running time:
Generally you want to choose the most efficient algorithm— whether you’re trying to optimize for time or space.
Big O notation:
Big O notation is special notation that tells you how fast an algorithm is.
Big O notation lets you compare the number of operations. It tells you how fast the algorithm grows.
Big O notation is written as follows:
  O(n) : O is big O, n is number of operations.
Big O establishes a worst-case run time.
_____________________________________________________________________________________________________
Some common Big O run times
Here are five Big O run times that you’ll encounter a lot, sorted from fastest to slowest:
• O(log n), also known as log time. Example: Binary search.
• O(n), also known as linear time. Example: Simple search.
• O(n * log n). Example: A fast sorting algorithm, like quicksort (coming up in chapter 4).
• O(n2). Example: A slow sorting algorithm, like selection sort (coming up in chapter 2).
• O(n!). Example: A really slow algorithm, like the traveling salesperson (coming up next!).
_____________________________________________________________________________________________________

